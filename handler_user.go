package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/SyedAanif/rss-feed-aggregator/internal/database"
	"github.com/google/uuid"
)

/*
	HTTP Handler to deal with operations related to DB in GO
	// NOTE:: function signature can't change, so to get apiConfig here, we pass a pointer
*/
func (apiCfg *apiConfig) handlerCreateUser(w http.ResponseWriter, r *http.Request) {
	// Accept the request body as JSON
	type parameters struct{
		Name string `json:"name"`
	}

	// Decode the request body
	decoder := json.NewDecoder(r.Body)
	params := parameters{} // create an empty struct
	err := decoder.Decode(&params) // decode into parameters
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Error parsing JSON: %v", err))
		return
	}

	// Access the DB to create the user using the Go code generated by sqlc
	user, err := apiCfg.DB.CreateUser(r.Context(), database.CreateUserParams{
		ID: uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		Name: params.Name,
	})
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't create user: %v", err))
		return
	}

	// NOTE:: Fields with capital starts are exported and can be marshaled to JSON, 
	// exactly as capital letters of functions
	// so we can build custom DTO converter
	respondWithJSON(w, 200, databaseUserToUser(user))
}