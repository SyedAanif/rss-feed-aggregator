package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	// "github.com/SyedAanif/rss-feed-aggregator/internal/auth"
	"github.com/SyedAanif/rss-feed-aggregator/internal/database"
	"github.com/google/uuid"
)

/*
	HTTP Handler to deal with operations related to DB in GO
	// NOTE:: function signature can't change, so to get apiConfig here, we pass a pointer
	// NOTE:: will have a middleware for authenticated users
*/
func (apiCfg *apiConfig) handlerCreateFeed(w http.ResponseWriter, r *http.Request, user database.User) {
	// Accept the request body as JSON
	type parameters struct{
		Name string `json:"name"`
		URL string 	`json:"url"`
	}

	// Decode the request body
	decoder := json.NewDecoder(r.Body)
	params := parameters{} // create an empty struct
	err := decoder.Decode(&params) // decode into parameters
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Error parsing JSON: %v", err))
		return
	}

	// Access the DB to create the feed using the Go code generated by sqlc
	feed, err := apiCfg.DB.CreateFeed(r.Context(), database.CreateFeedParams{
		ID: uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		Name: params.Name,
		Url: params.URL,
		UserID: user.ID,
	})
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't create feed: %v", err))
		return
	}

	// NOTE:: Fields with capital starts are exported and can be marshaled to JSON, 
	// exactly as capital letters of functions
	// so we can build custom DTO converter
	respondWithJSON(w, 201, databaseFeedToFeed(feed))
}



func (apiCfg *apiConfig) handlerGetFeeds(w http.ResponseWriter, r *http.Request) {
	

	// Access the DB to create the feed using the Go code generated by sqlc
	feeds, err := apiCfg.DB.GetFeeds(r.Context())
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't retrieve feeds: %v", err))
		return
	}

	// NOTE:: Fields with capital starts are exported and can be marshaled to JSON, 
	// exactly as capital letters of functions
	// so we can build custom DTO converter
	respondWithJSON(w, 200, databaseFeedsToFeeds(feeds))
}
