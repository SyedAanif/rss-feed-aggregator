package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	// "github.com/SyedAanif/rss-feed-aggregator/internal/auth"
	"github.com/SyedAanif/rss-feed-aggregator/internal/database"
	"github.com/go-chi/chi"
	"github.com/google/uuid"
)

/*
	HTTP Handler to deal with operations related to DB in GO
	// NOTE:: function signature can't change, so to get apiConfig here, we pass a pointer
	// NOTE:: will have a middleware for authenticated users
	for follow there will be a user to feed relationship
*/
func (apiCfg *apiConfig) handlerCreateFeedFollow(w http.ResponseWriter, r *http.Request, user database.User) {
	// Accept the request body as JSON
	type parameters struct{
		FeedID uuid.UUID `json:"feed_id"`
	}

	// Decode the request body
	decoder := json.NewDecoder(r.Body)
	params := parameters{} // create an empty struct
	err := decoder.Decode(&params) // decode into parameters
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Error parsing JSON: %v", err))
		return
	}

	// Access the DB to create the user to feed follow using the Go code generated by sqlc
	feedFollow, err := apiCfg.DB.CreateFeedFollow(r.Context(), database.CreateFeedFollowParams{
		ID: uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		UserID: user.ID,
		FeedID: params.FeedID,
	})
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't create feed follow: %v", err))
		return
	}

	// NOTE:: Fields with capital starts are exported and can be marshaled to JSON, 
	// exactly as capital letters of functions
	// so we can build custom DTO converter
	respondWithJSON(w, 201, databaseFeedFollowToFeedFollow(feedFollow))
}

/*
	HTTP Handler to deal with operations related to DB in GO
	// NOTE:: function signature can't change, so to get apiConfig here, we pass a pointer
	// NOTE:: will have a middleware for authenticated users
	to get feed followed by an authenticated user
*/
func (apiCfg *apiConfig) handlerGetFeedFollows(w http.ResponseWriter, r *http.Request, user database.User) {

	// Access the DB to create the user to feed follow using the Go code generated by sqlc
	feedFollows, err := apiCfg.DB.GetFeedFollows(r.Context(), user.ID)
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't retrieve feed follow: %v", err))
		return
	}

	// NOTE:: Fields with capital starts are exported and can be marshaled to JSON, 
	// exactly as capital letters of functions
	// so we can build custom DTO converter
	respondWithJSON(w, 200, databaseFeedsFollowToFeedFollows(feedFollows))
}

/*
	HTTP Handler to deal with operations related to DB in GO
	// NOTE:: function signature can't change, so to get apiConfig here, we pass a pointer
	// NOTE:: will have a middleware for authenticated users
	to unfollow feed followed by an authenticated user
*/
func (apiCfg *apiConfig) handlerDeleteFeedFollow(w http.ResponseWriter, r *http.Request, user database.User) {
	feedFollowIDStr := chi.URLParam(r,"feedFollowID") // Get key from URL Path Variable
	feedFollowID, err := uuid.Parse(feedFollowIDStr) // Parse to a UUID
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't parse feed follow id: %v",err))
		return
	}

	err = apiCfg.DB.DeleteFeedFollows(r.Context(), database.DeleteFeedFollowsParams{
		ID: feedFollowID,
		UserID: user.ID,
	})

	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't delete feed follow id: %v",err))
		return
	}
	respondWithJSON(w, 200, struct{}{})
}